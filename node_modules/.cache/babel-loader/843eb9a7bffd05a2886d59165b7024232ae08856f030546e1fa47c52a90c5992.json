{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vivian/Desktop/today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/vivian/Desktop/today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vivian/Desktop/today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nvar DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nvar DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nvar DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nvar DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    // default storage key uses the supabase project ref as a namespace\n    var defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    var DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    var settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this.headers,\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n  }, {\n    key: \"from\",\n    value: function from(relation) {\n      return this.rest.from(relation);\n    }\n    /**\n     * Perform a query on a schema distinct from the default schema supplied via\n     * the `options.db.schema` constructor parameter.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The name of the schema to query\n     */\n  }, {\n    key: \"schema\",\n    value: function schema(_schema) {\n      return this.rest.schema(_schema);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n      return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      return this.realtime.removeAllChannels();\n    }\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken() {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$auth$getS, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.auth.getSession();\n            case 2:\n              _yield$this$auth$getS = _context.sent;\n              data = _yield$this$auth$getS.data;\n              return _context.abrupt(\"return\", (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref, headers, fetch) {\n      var autoRefreshToken = _ref.autoRefreshToken,\n        persistSession = _ref.persistSession,\n        detectSessionInUrl = _ref.detectSessionInUrl,\n        storage = _ref.storage,\n        storageKey = _ref.storageKey,\n        flowType = _ref.flowType,\n        debug = _ref.debug;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, authHeaders), headers),\n        storageKey: storageKey,\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        storage: storage,\n        flowType: flowType,\n        debug: debug,\n        fetch: fetch\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign({\n          apikey: this.supabaseKey\n        }, options === null || options === void 0 ? void 0 : options.params)\n      }));\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this = this;\n      var data = this.auth.onAuthStateChange(function (event, session) {\n        _this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n      });\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, source, token) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n        this.changedAccessToken = undefined;\n      }\n    }\n  }]);\n  return SupabaseClient;\n}();\nexport { SupabaseClient as default };","map":{"version":3,"names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","SupabaseClient","supabaseUrl","supabaseKey","options","_classCallCheck","Error","_supabaseUrl","realtimeUrl","concat","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_b","_a","_d","_c","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","rest","_h","_listenForAuthEvents","_createClass","key","get","customFetch","value","from","relation","rpc","fn","args","arguments","length","undefined","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","getSession","_yield$this$auth$getS","_context","sent","data","abrupt","session","access_token","stop","_callee","_ref","storage","debug","authHeaders","Authorization","apikey","url","params","_this","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","default"],"sources":["/Users/vivian/Desktop/today-i-learned/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    return this.rest.from(relation)\n  }\n\n  /**\n   * Perform a query on a schema distinct from the default schema supplied via\n   * the `options.db.schema` constructor parameter.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The name of the schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}